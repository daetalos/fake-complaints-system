/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/complaint-categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Complaint Categories
         * @description Retrieves all complaint categories, grouped by main category.
         */
        get: operations["get_complaint_categories_api_complaint_categories__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/complaints/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Complaint
         * @description Creates a new complaint.
         */
        post: operations["create_complaint_api_complaints__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Root */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Complaint */
        Complaint: {
            /** Description */
            description: string;
            /**
             * Complaint Id
             * Format: uuid
             */
            complaint_id: string;
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Patient Id
             * Format: uuid
             */
            patient_id: string;
            /**
             * Case Id
             * Format: uuid
             */
            case_id: string;
            /**
             * Patient
             */
            patient: components["schemas"]["PatientSummary"];
            /**
             * Case
             */
            case: components["schemas"]["CaseSummary"];
        };
        /** ComplaintCategory */
        ComplaintCategory: {
            /** Main Category */
            main_category: string;
            /** Sub Categories */
            sub_categories: components["schemas"]["SubCategory"][];
        };
        /** ComplaintCreate */
        ComplaintCreate: {
            /** Description */
            description: string;
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /**
             * Patient Id
             * Format: uuid
             */
            patient_id: string;
            /**
             * Case Id
             * Format: uuid
             */
            case_id: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** SubCategory */
        SubCategory: {
            /**
             * Category Id
             * Format: uuid
             */
            category_id: string;
            /** Sub Category */
            sub_category: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** Patient Summary */
        PatientSummary: {
            /** Patient Id */
            patient_id: string;
            /** Name */
            name: string;
            /** Date of Birth */
            dob: string;
        };
        /** Case Summary */
        CaseSummary: {
            /** Case Id */
            case_id: string;
            /** Case Reference */
            case_reference: string;
            /** Patient Id */
            patient_id: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_complaint_categories_api_complaint_categories__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComplaintCategory"][];
                };
            };
        };
    };
    create_complaint_api_complaints__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComplaintCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Complaint"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
