---
description: 
globs: "**/*.py,**/main.py,**/routers/**,**/api/**,**/endpoints/**,**/handlers/**,**/views.py"
alwaysApply: false
---
---
description: Enforce RESTful API conventions, HTTP methods, status codes, and response formats
---

# RESTful API Design Rule

## Core Requirements
**ALWAYS follow RESTful conventions for API design.** Use proper HTTP methods, status codes, URL patterns, and standardized response formats.

## HTTP Methods and Resource Patterns

### Standard REST Operations
```python
from fastapi import FastAPI, HTTPException, status, Depends, Query
from typing import List, Optional

app = FastAPI()

# ✅ GET - Retrieve resources
@app.get("/users", status_code=status.HTTP_200_OK)
async def get_users(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    active: Optional[bool] = None
) -> List[UserResponse]:
    """Get paginated list of users with optional filtering."""
    pass

@app.get("/users/{user_id}", status_code=status.HTTP_200_OK)
async def get_user(user_id: int) -> UserResponse:
    """Get specific user by ID."""
    user = await user_service.get_user(user_id)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    return user

# ✅ POST - Create new resources
@app.post("/users", status_code=status.HTTP_201_CREATED)
async def create_user(user: UserCreate) -> UserResponse:
    """Create a new user."""
    try:
        return await user_service.create_user(user)
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )

# ✅ PUT - Replace entire resource
@app.put("/users/{user_id}", status_code=status.HTTP_200_OK)
async def update_user(user_id: int, user: UserUpdate) -> UserResponse:
    """Replace entire user resource."""
    existing_user = await user_service.get_user(user_id)
    if not existing_user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    return await user_service.update_user(user_id, user)

# ✅ PATCH - Partial update
@app.patch("/users/{user_id}", status_code=status.HTTP_200_OK)
async def patch_user(user_id: int, user: UserPatch) -> UserResponse:
    """Partially update user resource."""
    existing_user = await user_service.get_user(user_id)
    if not existing_user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    return await user_service.patch_user(user_id, user)

# ✅ DELETE - Remove resource
@app.delete("/users/{user_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_user(user_id: int) -> None:
    """Delete user."""
    existing_user = await user_service.get_user(user_id)
    if not existing_user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    await user_service.delete_user(user_id)

# ❌ Wrong - Non-RESTful patterns
@app.get("/get_users")  # Don't use verbs in URLs
@app.post("/users/create")  # HTTP method already indicates action
@app.get("/user_data/{id}")  # Use consistent plural naming
@app.post("/users/{user_id}/activate")  # Should be PATCH with status field
```

### Nested Resource Patterns
```python
# ✅ Correct - Nested resource patterns
@app.get("/users/{user_id}/posts", status_code=status.HTTP_200_OK)
async def get_user_posts(
    user_id: int,
    skip: int = Query(0, ge=0),
    limit: int = Query(50, ge=1, le=100)
) -> List[PostResponse]:
    """Get posts by specific user."""
    pass

@app.post("/users/{user_id}/posts", status_code=status.HTTP_201_CREATED)
async def create_user_post(user_id: int, post: PostCreate) -> PostResponse:
    """Create new post for specific user."""
    pass

@app.get("/users/{user_id}/posts/{post_id}", status_code=status.HTTP_200_OK)
async def get_user_post(user_id: int, post_id: int) -> PostResponse:
    """Get specific post by specific user."""
    pass

# ✅ Resource relationships
@app.post("/posts/{post_id}/comments", status_code=status.HTTP_201_CREATED)
async def create_comment(post_id: int, comment: CommentCreate) -> CommentResponse:
    """Create comment on specific post."""
    pass

@app.get("/categories/{category_id}/posts", status_code=status.HTTP_200_OK)
async def get_posts_by_category(category_id: int) -> List[PostResponse]:
    """Get all posts in specific category."""
    pass
```

## URL Design Standards

### Resource Naming Conventions
```python
# ✅ Correct URL patterns
/users                    # Collection of users
/users/{id}              # Specific user
/users/{id}/posts        # User's posts
/users/{id}/posts/{pid}  # Specific post by user
/posts                   # All posts
/posts/{id}              # Specific post
/posts/{id}/comments     # Comments on post
/categories              # All categories
/categories/{id}/posts   # Posts in category

# ✅ Query parameters for filtering/sorting/pagination
/users?active=true&role=admin&sort=created_at&order=desc&page=1&limit=20
/posts?category=tech&author=john&published=true&since=2023-01-01

# ❌ Wrong patterns
/getUsers               # No verbs in URLs
/user/{id}             # Use plural consistently  
/users-posts/{id}      # Use nested resources
/posts/by-category/{id} # Use nested resources
/posts?getUserPosts=true # Don't use action parameters
```

### Query Parameter Standards
```python
# ✅ Standardized query parameters
@app.get("/users")
async def get_users(
    # Pagination
    page: int = Query(1, ge=1, description="Page number"),
    limit: int = Query(20, ge=1, le=100, description="Items per page"),
    
    # Filtering
    active: Optional[bool] = Query(None, description="Filter by active status"),
    role: Optional[str] = Query(None, description="Filter by user role"),
    search: Optional[str] = Query(None, description="Search in name and email"),
    
    # Sorting
    sort: str = Query("created_at", description="Sort field"),
    order: str = Query("desc", regex="^(asc|desc)$", description="Sort order"),
    
    # Field selection
    fields: Optional[str] = Query(None, description="Comma-separated fields to include")
):
    """Get users with comprehensive query options."""
    pass

# ✅ Date range filtering
@app.get("/posts")
async def get_posts(
    created_after: Optional[str] = Query(None, description="ISO date string"),
    created_before: Optional[str] = Query(None, description="ISO date string"),
    published: Optional[bool] = Query(None, description="Filter by published status")
):
    """Get posts with date range filtering."""
    pass
```

## HTTP Status Code Standards

### Correct Status Code Usage
```python
from fastapi import status

# ✅ Success status codes
# 200 OK - Standard success response
@app.get("/users/{id}", status_code=status.HTTP_200_OK)

# 201 Created - Resource created successfully
@app.post("/users", status_code=status.HTTP_201_CREATED)

# 204 No Content - Success with no response body
@app.delete("/users/{id}", status_code=status.HTTP_204_NO_CONTENT)

# ✅ Client error status codes
# 400 Bad Request - Invalid request data
if not user_data.email:
    raise HTTPException(
        status_code=status.HTTP_400_BAD_REQUEST,
        detail="Email is required"
    )

# 401 Unauthorized - Authentication required
@app.get("/profile", dependencies=[Depends(verify_token)])

# 403 Forbidden - Authenticated but not authorized
if not user.is_admin:
    raise HTTPException(
        status_code=status.HTTP_403_FORBIDDEN,
        detail="Admin access required"
    )

# 404 Not Found - Resource doesn't exist
if not user:
    raise HTTPException(
        status_code=status.HTTP_404_NOT_FOUND,
        detail="User not found"
    )

# 409 Conflict - Resource already exists
try:
    await user_service.create_user(user_data)
except EmailAlreadyExistsError:
    raise HTTPException(
        status_code=status.HTTP_409_CONFLICT,
        detail="Email already registered"
    )

# 422 Unprocessable Entity - Validation errors
# FastAPI automatically returns this for Pydantic validation errors

# ✅ Server error status codes
# 500 Internal Server Error - Unexpected server error
try:
    result = await external_service.call()
except Exception as e:
    logger.error(f"External service error: {e}")
    raise HTTPException(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        detail="Internal server error"
    )

# ❌ Wrong status code usage
@app.post("/users", status_code=status.HTTP_200_OK)  # Should be 201
@app.delete("/users/{id}", status_code=status.HTTP_200_OK)  # Should be 204
raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Validation failed")  # Should be 400
```

## Standardized Response Formats

### Response Schema Standards
```python
from pydantic import BaseModel
from typing import Optional, List, Any, Dict

# ✅ Standard success response
class ApiResponse(BaseModel):
    success: bool = True
    data: Any
    message: Optional[str] = None

# ✅ Error response format
class ErrorResponse(BaseModel):
    success: bool = False
    error: str
    message: str
    details: Optional[Dict[str, Any]] = None

# ✅ Paginated response format
class PaginatedResponse(BaseModel):
    success: bool = True
    data: List[Any]
    meta: Dict[str, Any]

# ✅ Implementation examples
@app.get("/users", response_model=PaginatedResponse)
async def get_users(page: int = 1, limit: int = 20):
    users = await user_service.get_users(page, limit)
    total = await user_service.count_users()
    
    return PaginatedResponse(
        data=users,
        meta={
            "page": page,
            "limit": limit,
            "total": total,
            "pages": (total + limit - 1) // limit,
            "has_next": page * limit < total,
            "has_prev": page > 1
        }
    )

@app.post("/users", response_model=ApiResponse)
async def create_user(user: UserCreate):
    new_user = await user_service.create_user(user)
    return ApiResponse(
        data=new_user,
        message="User created successfully"
    )

# ✅ Error handling with standard format
@app.exception_handler(ValueError)
async def value_error_handler(request: Request, exc: ValueError):
    return JSONResponse(
        status_code=status.HTTP_400_BAD_REQUEST,
        content=ErrorResponse(
            error="VALIDATION_ERROR",
            message=str(exc)
        ).dict()
    )
```

### Resource Representation Standards
```python
# ✅ Consistent resource schemas
class UserBase(BaseModel):
    name: str
    email: str
    role: str

class UserCreate(UserBase):
    password: str

class UserUpdate(UserBase):
    pass

class UserPatch(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    role: Optional[str] = None

class UserResponse(UserBase):
    id: int
    is_active: bool
    created_at: str
    updated_at: str
    
    # ✅ Include related resource links
    links: Dict[str, str] = {
        "self": "/users/{id}",
        "posts": "/users/{id}/posts",
        "profile": "/users/{id}/profile"
    }

# ✅ Nested resource representation
class PostResponse(BaseModel):
    id: int
    title: str
    content: str
    published: bool
    created_at: str
    updated_at: str
    
    # ✅ Author reference (not full object to avoid circular references)
    author: Dict[str, Any] = {
        "id": int,
        "name": str,
        "url": "/users/{author_id}"
    }
    
    # ✅ Resource links
    links: Dict[str, str] = {
        "self": "/posts/{id}",
        "comments": "/posts/{id}/comments",
        "author": "/users/{author_id}"
    }
```

## Content Negotiation and Headers

### Request/Response Headers
```python
from fastapi import Header, Request
from typing import Optional

@app.get("/users/{id}")
async def get_user(
    id: int,
    accept: Optional[str] = Header(None),
    if_none_match: Optional[str] = Header(None)
):
    """Handle content negotiation and caching headers."""
    
    # Content negotiation
    if accept and "application/xml" in accept:
        # Return XML format if requested
        pass
    
    # ETag support for caching
    user = await user_service.get_user(id)
    user_etag = generate_etag(user)
    
    if if_none_match == user_etag:
        raise HTTPException(
            status_code=status.HTTP_304_NOT_MODIFIED
        )
    
    return Response(
        content=user.json(),
        media_type="application/json",
        headers={"ETag": user_etag}
    )

# ✅ CORS headers handling
from fastapi.middleware.cors import CORSMiddleware

app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://yourdomain.com"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "PATCH", "DELETE"],
    allow_headers=["Accept", "Content-Type", "Authorization"],
    expose_headers=["X-Total-Count", "ETag"]
)
```

## API Versioning Standards

### URL Path Versioning
```python
# ✅ Version in URL path
from fastapi import APIRouter

v1_router = APIRouter(prefix="/api/v1")
v2_router = APIRouter(prefix="/api/v2")

@v1_router.get("/users")
async def get_users_v1():
    """Version 1 of users endpoint."""
    pass

@v2_router.get("/users")
async def get_users_v2():
    """Version 2 with enhanced response format."""
    pass

app.include_router(v1_router)
app.include_router(v2_router)

# ✅ Header-based versioning alternative
@app.get("/users")
async def get_users(
    api_version: str = Header("v1", alias="API-Version")
):
    """Version handling via headers."""
    if api_version == "v2":
        # Return v2 format
        pass
    else:
        # Return v1 format (default)
        pass
```

## Common REST Anti-patterns

### URL Design Violations
```python
# ❌ Wrong - Verbs in URLs
@app.get("/getUserById/{id}")
@app.post("/createUser")
@app.put("/updateUser/{id}")
@app.delete("/deleteUser/{id}")

# ❌ Wrong - Inconsistent naming
@app.get("/user/{id}")      # Should be plural
@app.get("/usersList")       # Don't add 'List'
@app.get("/user-profile/{id}")  # Use nested resources

# ❌ Wrong - Action-based URLs instead of resource-based
@app.post("/users/{id}/activate")    # Should be PATCH with status
@app.post("/users/{id}/sendEmail")   # Should be separate service
@app.get("/users/search?q=john")     # Use query params on main resource
```

### Status Code Misuse
```python
# ❌ Wrong status codes
@app.post("/users", status_code=200)     # Should be 201
@app.delete("/users/{id}", status_code=200)  # Should be 204
@app.get("/users/{id}")
async def get_user(id: int):
    if not user:
        raise HTTPException(status_code=400, detail="User not found")  # Should be 404

# ❌ Wrong - Using 200 for all responses
@app.get("/users/{id}")
async def get_user(id: int):
    return {"success": False, "error": "User not found"}  # Should use proper HTTP status
```

## Cross-Origin Resource Sharing (CORS)

**ALWAYS configure CORS middleware on the backend API if it is intended to be accessed by a frontend application.** Browsers will block cross-origin API requests by default for security reasons.

### FastAPI Example
For FastAPI applications, use the `CORSMiddleware` to explicitly allow origins, methods, and headers.

```python
from fastapi.middleware.cors import CORSMiddleware

# List of origins that are allowed to make cross-origin requests.
# For development, this should include the frontend's local development server.
origins = [
    "http://localhost:3000", # React's default dev port
    "http://localhost:5173", # Vite's default dev port
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"], # Or be more restrictive (e.g., ["GET", "POST"])
    allow_headers=["*"],
)
```

**Never use a wildcard (`"*"`) for `allow_origins` in a production environment.** Always specify the exact domain(s) of your frontend application.

## Security Best Practices
# ... existing code ...

**Remember: RESTful API design ensures predictability and consistency. Follow HTTP standards, use proper status codes, maintain consistent URL patterns, and provide standardized response formats.**