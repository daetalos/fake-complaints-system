---
description: 
globs: "**/*.py,**/main.py,**/app.py,**/config/**,**/middleware/**,**/exceptions/**,**/services/**,**/repositories/**"
alwaysApply: false
---
---
description: Enforce Loguru-based structured logging and Python error handling patterns
---

# Backend Error Handling & Logging Rule (Loguru)

## Core Requirements
**ALWAYS use Loguru for structured logging and implement comprehensive error handling patterns.** Ensure production-ready observability and debugging capabilities.

## Loguru Configuration

### Basic Setup
```python
# config/logging.py
from loguru import logger
import sys
import os
import json
from datetime import datetime

# Remove default handler
logger.remove()

# Configuration from environment
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")

# Development: Human-readable colored logs
if ENVIRONMENT == "development":
    logger.add(
        sys.stdout,
        level=LOG_LEVEL,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        colorize=True,
        backtrace=True,
        diagnose=True,
    )
else:
    # Production: Structured JSON logs
    def json_formatter(record):
        return json.dumps({
            "timestamp": record["time"].isoformat(),
            "level": record["level"].name,
            "message": record["message"],
            "module": record["module"],
            "function": record["function"],
            "line": record["line"],
            "extra": record.get("extra", {}),
        })
    
    logger.add(
        sys.stdout,
        level=LOG_LEVEL,
        format=json_formatter,
        serialize=False,
        backtrace=False,
        diagnose=False,
    )

# File logging with rotation
logger.add(
    "logs/app_{time:YYYY-MM-DD}.log",
    level=LOG_LEVEL,
    rotation="1 day",
    retention="30 days",
    compression="zip",
    format=json_formatter if ENVIRONMENT != "development" else None,
)

# Error-only log file
logger.add(
    "logs/errors_{time:YYYY-MM-DD}.log",
    level="ERROR",
    rotation="1 day", 
    retention="90 days",
    compression="zip",
)
```

## Structured Logging Patterns

### Helper Functions
```python
# config/logging.py (continued)
def log_api_request(method: str, path: str, user_id: str = None, **kwargs):
    """Log API request with structured data."""
    logger.info(
        "API request",
        extra={
            "event_type": "api_request",
            "method": method,
            "path": path,
            "user_id": user_id,
            **kwargs
        }
    )

def log_api_response(method: str, path: str, status_code: int, duration_ms: float):
    """Log API response with performance data."""
    logger.info(
        "API response",
        extra={
            "event_type": "api_response", 
            "method": method,
            "path": path,
            "status_code": status_code,
            "duration_ms": duration_ms,
        }
    )

def log_business_event(event_name: str, user_id: str = None, **context):
    """Log business events for analytics."""
    logger.info(
        f"Business event: {event_name}",
        extra={
            "event_type": "business_event",
            "event_name": event_name,
            "user_id": user_id,
            "timestamp": datetime.utcnow().isoformat(),
            **context
        }
    )

def log_security_event(event_type: str, user_id: str = None, **details):
    """Log security-related events."""
    logger.warning(
        f"Security event: {event_type}",
        extra={
            "event_type": "security_event",
            "security_event": event_type,
            "user_id": user_id,
            **details
        }
    )
```

### FastAPI Integration
```python
# main.py
from loguru import logger
from fastapi import FastAPI, Request, HTTPException
import time

app = FastAPI()

@app.middleware("http")
async def logging_middleware(request: Request, call_next):
    start_time = time.time()
    
    # Log incoming request
    log_api_request(
        method=request.method,
        path=request.url.path,
        ip_address=request.client.host,
        user_agent=request.headers.get("user-agent", "")
    )
    
    try:
        response = await call_next(request)
        duration_ms = (time.time() - start_time) * 1000
        
        log_api_response(
            method=request.method,
            path=request.url.path,
            status_code=response.status_code,
            duration_ms=duration_ms
        )
        
        return response
        
    except Exception as e:
        duration_ms = (time.time() - start_time) * 1000
        logger.error(
            "Request failed",
            extra={
                "event_type": "api_error",
                "method": request.method,
                "path": request.url.path,
                "duration_ms": duration_ms,
                "error": str(e)
            }
        )
        raise
```

## Error Handling Patterns

### Custom Exception Classes
```python
# exceptions/base.py
from typing import Optional, Dict, Any

class ApplicationException(Exception):
    """Base application exception with structured data."""
    
    def __init__(
        self,
        message: str,
        error_code: str = None,
        details: Optional[Dict[str, Any]] = None,
        status_code: int = 500
    ):
        self.message = message
        self.error_code = error_code or self.__class__.__name__
        self.details = details or {}
        self.status_code = status_code
        super().__init__(self.message)

class ValidationError(ApplicationException):
    def __init__(self, message: str, field: str = None, **kwargs):
        super().__init__(message, status_code=400, **kwargs)
        if field:
            self.details["field"] = field

class NotFoundError(ApplicationException):
    def __init__(self, resource: str, identifier: str = None, **kwargs):
        message = f"{resource} not found"
        if identifier:
            message += f" (ID: {identifier})"
        super().__init__(message, status_code=404, **kwargs)

class BusinessLogicError(ApplicationException):
    def __init__(self, message: str, **kwargs):
        super().__init__(message, status_code=422, **kwargs)

# Exception handler
@app.exception_handler(ApplicationException)
async def application_exception_handler(request: Request, exc: ApplicationException):
    logger.error(
        f"Application exception: {exc.error_code}",
        extra={
            "event_type": "application_exception",
            "error_code": exc.error_code,
            "message": exc.message,
            "details": exc.details,
            "path": request.url.path,
            "method": request.method
        }
    )
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "error": exc.error_code,
            "message": exc.message,
            "details": exc.details
        }
    )
```

### Service Layer Patterns
```python
# services/user_service.py
from loguru import logger
from contextlib import contextmanager

@contextmanager
def log_operation(operation: str, **context):
    """Context manager for operation logging."""
    logger.info(f"Starting {operation}", extra={"operation": operation, **context})
    start_time = time.time()
    
    try:
        yield
        duration_ms = (time.time() - start_time) * 1000
        logger.info(
            f"Completed {operation}",
            extra={"operation": operation, "duration_ms": duration_ms, **context}
        )
    except Exception as e:
        duration_ms = (time.time() - start_time) * 1000
        logger.error(
            f"Failed {operation}",
            extra={
                "operation": operation,
                "duration_ms": duration_ms,
                "error": str(e),
                **context
            }
        )
        raise

class UserService:
    async def create_user(self, user_data: UserCreate) -> User:
        with log_operation("create_user", email=user_data.email):
            try:
                # Validation
                if await self.get_user_by_email(user_data.email):
                    raise ValidationError("Email already registered", field="email")
                
                # Create user
                user = User(**user_data.dict())
                db.add(user)
                await db.commit()
                
                # Log business event
                log_business_event(
                    "user_created",
                    user_id=user.id,
                    registration_source="api"
                )
                
                return user
                
            except ValidationError:
                await db.rollback()
                raise
            except Exception as e:
                await db.rollback()
                logger.error("Database error in create_user", extra={"error": str(e)})
                raise ApplicationException("User creation failed")

    async def authenticate_user(self, email: str, password: str) -> User:
        with log_operation("authenticate_user", email=email):
            user = await self.get_user_by_email(email)
            
            if not user:
                log_security_event("login_attempt_invalid_email", email=email)
                raise ValidationError("Invalid credentials")
            
            if not verify_password(password, user.hashed_password):
                log_security_event(
                    "login_attempt_invalid_password",
                    user_id=user.id,
                    email=email
                )
                raise ValidationError("Invalid credentials")
            
            log_business_event("user_login", user_id=user.id)
            return user
```

## Database Operation Logging

### Repository Pattern with Logging
```python
# repositories/base.py
from loguru import logger
import time

class BaseRepository:
    def __init__(self, db: Session, model_class):
        self.db = db
        self.model = model_class
    
    async def create(self, **data) -> Any:
        start_time = time.time()
        
        try:
            obj = self.model(**data)
            self.db.add(obj)
            await self.db.commit()
            
            duration_ms = (time.time() - start_time) * 1000
            logger.info(
                "Database CREATE",
                extra={
                    "event_type": "database_operation",
                    "operation": "CREATE",
                    "table": self.model.__tablename__,
                    "duration_ms": duration_ms,
                    "record_id": obj.id
                }
            )
            
            return obj
            
        except Exception as e:
            await self.db.rollback()
            duration_ms = (time.time() - start_time) * 1000
            
            logger.error(
                "Database CREATE failed",
                extra={
                    "event_type": "database_error",
                    "operation": "CREATE", 
                    "table": self.model.__tablename__,
                    "duration_ms": duration_ms,
                    "error": str(e)
                }
            )
            raise
    
    async def get_by_id(self, id: int) -> Optional[Any]:
        start_time = time.time()
        
        result = self.db.query(self.model).filter(self.model.id == id).first()
        duration_ms = (time.time() - start_time) * 1000
        
        logger.debug(
            "Database SELECT",
            extra={
                "event_type": "database_operation",
                "operation": "SELECT",
                "table": self.model.__tablename__,
                "duration_ms": duration_ms,
                "found": result is not None
            }
        )
        
        return result
```

## Monitoring Integration

### Health Checks
```python
# monitoring/health.py
from fastapi import APIRouter
from loguru import logger

router = APIRouter()

@router.get("/health")
async def health_check():
    """Basic health check."""
    logger.info("Health check requested", extra={"event_type": "health_check"})
    return {"status": "healthy", "timestamp": datetime.utcnow().isoformat()}

@router.get("/health/detailed") 
async def detailed_health_check(db: Session = Depends(get_db)):
    """Detailed health check with dependencies."""
    checks = {}
    overall_status = "healthy"
    
    # Database check
    try:
        start_time = time.time()
        db.execute("SELECT 1")
        db_duration = (time.time() - start_time) * 1000
        
        checks["database"] = {"status": "healthy", "response_time_ms": db_duration}
        logger.info("Database health check passed", extra={"duration_ms": db_duration})
        
    except Exception as e:
        checks["database"] = {"status": "unhealthy", "error": str(e)}
        overall_status = "unhealthy"
        logger.error("Database health check failed", extra={"error": str(e)})
    
    return {
        "status": overall_status,
        "timestamp": datetime.utcnow().isoformat(),
        "checks": checks
    }
```

### Log Sanitization
```python
# config/logging.py (continued)
import re

SENSITIVE_PATTERNS = [
    r'password', r'token', r'secret', r'key', 
    r'authorization', r'credit_card', r'ssn'
]

def sanitize_log_data(data: dict) -> dict:
    """Remove sensitive information from log data."""
    if not isinstance(data, dict):
        return data
    
    sanitized = {}
    for key, value in data.items():
        if any(pattern in key.lower() for pattern in SENSITIVE_PATTERNS):
            sanitized[key] = "[REDACTED]"
        elif isinstance(value, dict):
            sanitized[key] = sanitize_log_data(value)
        else:
            sanitized[key] = value
    
    return sanitized

# Usage in logging
logger.info("User data processed", extra=sanitize_log_data(user_data))
```

## Poetry Dependencies

### Required packages
```toml
# pyproject.toml
[tool.poetry.dependencies]
loguru = "^0.7.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
```

## Common Anti-patterns

### Logging Violations
```python
# ❌ Wrong - Poor logging practices
print("User created")  # Use logger
logger.info(f"User: {user.password}")  # Don't log secrets
logger.error("Error")  # No context
try:
    operation()
except:
    pass  # Silent failures

# ❌ Wrong - Poor error handling  
def create_user(data):
    user = User(**data)  # No validation
    db.add(user)  # No error handling
    return user  # No logging

# ✅ Correct - Follow patterns above with:
# - Structured logging with context
# - Proper exception handling
# - Security-aware sanitization
# - Performance monitoring
```


**Remember: Effective backend logging provides operational visibility and debugging capabilities. Use Loguru's structured logging, implement comprehensive error handling, and sanitize sensitive data for production systems.**