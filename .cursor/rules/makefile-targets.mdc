---
description: 
globs: "**/Makefile,**/makefile,**/Makefile.*,**/*.mk,**/README.md,**/CONTRIBUTING.md,**/docs/**,**/scripts/**"
alwaysApply: false
---
---
description: Enforce Makefile presence for standardized development workflow management
---

# Makefile Development Management Rule

## Core Requirements
**ALWAYS include a Makefile in the project root to standardize development workflows.** The Makefile must provide consistent commands for setup, development, testing, and deployment across all environments.

## Required Makefile Structure

### Essential Makefile Template
```makefile
# Makefile for Project Development
.PHONY: help install setup dev stop test lint format build clean migrate

# Default target
.DEFAULT_GOAL := help

# Variables
DOCKER_COMPOSE := docker-compose
POETRY := poetry

# Colors
GREEN := \033[32m
BLUE := \033[34m
RESET := \033[0m

## help: Show available commands
help:
	@echo "$(BLUE)Available commands:$(RESET)"
	@grep -E '^## [a-zA-Z_-]+:.*$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ": "}; {printf "  $(GREEN)%-12s$(RESET) %s\n", $1, $2}' | \
		sed 's/## //'

## install: Install all dependencies
install:
	@echo "$(BLUE)Installing dependencies...$(RESET)"
	$(POETRY) install
	cd frontend && npm ci
	$(POETRY) run pre-commit install
	@if [ ! -f .env ]; then cp .env.example .env; fi
	@echo "$(GREEN)‚úÖ Installation complete$(RESET)"

## setup: First-time project setup
setup: install
	@echo "$(BLUE)Building Docker images...$(RESET)"
	$(DOCKER_COMPOSE) build
	@echo "$(GREEN)üéâ Setup complete! Run 'make dev' to start$(RESET)"

## dev: Start development environment
dev:
	@echo "$(BLUE)Starting development...$(RESET)"
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.dev.yml up -d

## stop: Stop development environment
stop:
	$(DOCKER_COMPOSE) down

## test: Run all tests
test:
	@echo "$(BLUE)Running tests...$(RESET)"
	$(POETRY) run pytest
	cd frontend && npm test

## lint: Run linting
lint:
	@echo "$(BLUE)Running linting...$(RESET)"
	$(POETRY) run flake8 .
	$(POETRY) run mypy .
	cd frontend && npm run lint

## format: Format code
format:
	@echo "$(BLUE)Formatting code...$(RESET)"
	$(POETRY) run black .
	$(POETRY) run isort .
	cd frontend && npm run format

## check: Run formatting and linting
check: format lint
	@echo "$(GREEN)‚úÖ Quality checks complete$(RESET)"

## build: Build for production
build:
	@echo "$(BLUE)Building...$(RESET)"
	$(DOCKER_COMPOSE) build
	cd frontend && npm run build

## migrate: Run database migrations
migrate:
	$(POETRY) run alembic upgrade head

## clean: Clean temporary files
clean:
	@echo "$(BLUE)Cleaning...$(RESET)"
	find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	find . -name "*.pyc" -delete 2>/dev/null || true
	find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
	rm -rf htmlcov/ .coverage 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Cleanup complete$(RESET)"

## logs: Show service logs
logs:
	$(DOCKER_COMPOSE) logs -f
```

## Windows PowerShell Support

### For Windows users without Make
```powershell
# Simple PowerShell wrapper (make.ps1)
param([string]$Target = "help")

switch ($Target) {
    "install" { poetry install; cd frontend; npm ci; cd ..; poetry run pre-commit install }
    "dev" { docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d }
    "test" { poetry run pytest; cd frontend; npm test; cd .. }
    "format" { poetry run black .; poetry run isort .; cd frontend; npm run format; cd .. }
    "lint" { poetry run flake8 .; cd frontend; npm run lint; cd .. }
    "stop" { docker-compose down }
    default { Write-Host "Available: install, dev, test, format, lint, stop" }
}
```

## README.md Documentation Requirements

### Required in README.md:
```markdown
## Development Setup

### Quick Start
```bash
# First-time setup
make setup

# Start development
make dev

# Run tests
make test
```

### Available Commands
- `make help` - Show all available commands
- `make install` - Install dependencies
- `make dev` - Start development environment
- `make stop` - Stop development environment
- `make test` - Run tests
- `make lint` - Run linting
- `make format` - Format code
- `make check` - Run format + lint
- `make build` - Build for production
- `make migrate` - Run database migrations
- `make clean` - Clean temporary files

Windows users: Use `.\make.ps1 <command>` instead of `make <command>`.
```

## Common Anti-patterns to Avoid

### Makefile Requirements
```makefile
# ‚ùå Wrong - No help target or inconsistent commands
test:
	python -m pytest  # Should use poetry run

format:
	black .  # Should use poetry run

# ‚ùå Wrong - No integration with project tools
dev:
	python manage.py runserver  # Should use docker-compose

# ‚úÖ Correct - Follow the streamlined template above with:
# - Help system (make help)
# - Integration with Poetry, Docker, npm
# - Consistent command naming
# - Basic error handling
```

## Cross-Platform Makefile Standards

- **Do not use ANSI color codes** in `@echo` statements. Output should be plain text for compatibility on all platforms.
- **Do not wrap `@echo` output in double quotes**; use `@echo text` instead of `@echo "text"` to avoid literal quotes in Windows output.
- **Never indent comments inside recipes**. Place all comments above the recipe, not inside it. Indented comments are interpreted as shell commands and will cause errors.
- **Avoid Unix-only commands** (e.g., `find`, `rm -rf`) in recipes. These will fail on Windows. If cleanup is needed, add a comment instructing Windows users to delete files/folders manually.
- **If platform-specific logic is required**, document it clearly and provide PowerShell or batch alternatives for Windows users.

**Example of a correct, cross-platform clean target:**
```makefile
# Note: The following lines for removing Python cache files only work on Unix-like systems.
# On Windows, delete __pycache__ and .pyc files manually or use a PowerShell script.
# find . -type d -name "__pycache__" -exec rm -r {} +
# find . -type f -name "*.pyc" -delete
# On Windows, manually delete frontend/dist and frontend/node_modules/.vite if needed.
clean: down
	@echo Cleaning up Docker artifacts...
	$(DOCKER_COMPOSE) rm -f
	@echo Cleaning up Python artifacts...
	@echo Cleaning up frontend build artifacts...
	@echo Cleanup complete.
```

**Remember: A focused Makefile eliminates confusion and provides a consistent interface for essential development tasks. Keep it simple but comprehensive for daily workflows.**

## Cross-Platform Compatibility

Makefiles used in this project MUST be compatible with both Unix-like shells (bash, zsh) and Windows PowerShell.

1.  **Command Chaining:** Do not use `&&` to chain commands. Use separate lines for each command within a target. For complex, single-line needs, verify syntax works on both platforms or use a separate script.
2.  **File System Operations:** Do not use platform-specific commands like `rm -rf`, `cp`, or `find`. If a cleanup task is needed, provide guidance in comments for manual deletion or write a cross-platform script (e.g., in Python or Node.js).
3.  **Output:** Do not use ANSI color codes or other non-standard characters in `@echo` statements, as they render incorrectly on standard Windows terminals.

## Standard Targets

A `Makefile` MUST be provided in the root of the project to standardize common development tasks. It should include the following targets:

-   **ps**: Lists all running service containers.
-   **clean**: Stops all services and removes all build artifacts.

### setup

A `setup` target SHOULD be provided as the primary entry point for new developers. This target is responsible for creating a complete, ready-to-code development environment.

-   **Responsibilities:**
    -   Install backend dependencies using the chosen package manager (e.g., `poetry install`).
    -   Install frontend dependencies if a frontend exists (e.g., `npm install`).
    -   Install any required Git hooks if a hook manager is present (e.g., `pre-commit install`).