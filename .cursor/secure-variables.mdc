---
description: 
globs: "**/.env*","**/docker-compose*.yml","**/Dockerfile*","**/*.py","**/*.js","**/*.ts","**/config/**","**/settings/**"
alwaysApply: false
---
---
description: Enforce secure environment variable and secrets management practices
---

# Environment Variables & Secrets Management Rule

## Core Security Requirements
**NEVER hardcode sensitive information in source code.** All configuration and secrets must be managed through environment variables or secure secret management systems.

## Forbidden Practices
- ❌ Hardcoded API keys in source code
- ❌ Database passwords in configuration files
- ❌ Committing `.env` files with secrets
- ❌ Embedding JWT secrets directly in code
- ❌ Using production credentials in development
- ❌ Storing secrets in Docker images

## Environment Variable Standards

### File Organization
```
project-root/
├── .env.example           # Template with dummy values (COMMIT THIS)
├── .env                   # Local development secrets (NEVER COMMIT)
├── .env.local            # Local overrides (NEVER COMMIT)
├── .env.development      # Development defaults (no secrets)
├── .env.production       # Production template (no actual secrets)
└── .gitignore            # Must exclude actual .env files
```

### .env.example Template
```bash
# Database Configuration
DATABASE_URL=postgresql://user:password@localhost:5432/dbname
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=your_app_db
DATABASE_USER=your_user
DATABASE_PASSWORD=your_secure_password

# Redis Configuration
REDIS_URL=redis://localhost:6379
REDIS_HOST=localhost
REDIS_PORT=6379

# API Keys (use dummy values)
API_KEY=your_api_key_here
EXTERNAL_SERVICE_KEY=external_service_key_here

# JWT Configuration
JWT_SECRET_KEY=your_jwt_secret_minimum_32_characters_long
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# Application Settings
DEBUG=false
LOG_LEVEL=info
CORS_ORIGINS=http://localhost:3000,https://yourdomain.com

# External Services
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASSWORD=your_app_password

# File Storage
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_BUCKET_NAME=your_bucket_name
AWS_REGION=us-east-1
```

### Required .gitignore Entries
```gitignore
# Environment files (CRITICAL)
.env
.env.local
.env.*.local
.env.production
!.env.example

# IDE and OS files
.vscode/settings.json
.idea/
*.swp
*.swo

# Secrets and certificates
*.pem
*.key
*.crt
secrets/
```

## Backend Implementation (Python/FastAPI)

### Settings Configuration with Pydantic
```python
from pydantic import BaseSettings, validator
from typing import Optional, List
import os

class Settings(BaseSettings):
    # Database
    database_url: str
    database_host: str = "localhost"
    database_port: int = 5432
    database_name: str
    database_user: str
    database_password: str
    
    # Redis
    redis_url: str
    redis_host: str = "localhost"
    redis_port: int = 6379
    
    # JWT
    jwt_secret_key: str
    jwt_algorithm: str = "HS256"
    jwt_expiration_hours: int = 24
    
    # Application
    debug: bool = False
    log_level: str = "info"
    cors_origins: List[str] = []
    
    # External APIs
    api_key: str
    external_service_key: str
    
    # Email
    smtp_host: str
    smtp_port: int
    smtp_user: str
    smtp_password: str
    
    # AWS
    aws_access_key_id: Optional[str] = None
    aws_secret_access_key: Optional[str] = None
    aws_bucket_name: Optional[str] = None
    aws_region: str = "us-east-1"
    
    @validator('jwt_secret_key')
    def jwt_secret_must_be_strong(cls, v):
        if len(v) < 32:
            raise ValueError('JWT secret key must be at least 32 characters long')
        return v
    
    @validator('cors_origins', pre=True)
    def parse_cors_origins(cls, v):
        if isinstance(v, str):
            return [origin.strip() for origin in v.split(',')]
        return v
    
    class Config:
        env_file = ".env"
        env_file_encoding = 'utf-8'

# Global settings instance
settings = Settings()
```

### Environment Variable Usage
```python
# ✅ Correct - Using settings object
from config.settings import settings

database_url = settings.database_url
api_key = settings.api_key

# ✅ Correct - Direct os.environ with defaults
import os
debug_mode = os.getenv('DEBUG', 'false').lower() == 'true'
port = int(os.getenv('PORT', '8000'))

# ❌ Wrong - Hardcoded values
api_key = "sk-1234567890abcdef"  # NEVER DO THIS
database_url = "postgresql://user:pass@localhost/db"  # NEVER DO THIS
```

## Frontend Implementation (JavaScript/TypeScript)

### Environment Configuration
```typescript
// config/environment.ts
interface Environment {
  apiUrl: string;
  apiKey: string;
  debug: boolean;
  version: string;
}

const environment: Environment = {
  apiUrl: process.env.REACT_APP_API_URL || 'http://localhost:8000',
  apiKey: process.env.REACT_APP_API_KEY || '',
  debug: process.env.NODE_ENV === 'development',
  version: process.env.REACT_APP_VERSION || '1.0.0',
};

// Validate required environment variables
const requiredEnvVars = ['REACT_APP_API_URL', 'REACT_APP_API_KEY'];
const missingEnvVars = requiredEnvVars.filter(
  envVar => !process.env[envVar]
);

if (missingEnvVars.length > 0) {
  throw new Error(
    `Missing required environment variables: ${missingEnvVars.join(', ')}`
  );
}

export default environment;
```

### Frontend .env.example
```bash
# API Configuration
REACT_APP_API_URL=http://localhost:8000
REACT_APP_API_KEY=your_frontend_api_key

# Application Settings
REACT_APP_VERSION=1.0.0
REACT_APP_ENVIRONMENT=development

# Analytics (if needed)
REACT_APP_ANALYTICS_ID=your_analytics_id

# Feature Flags
REACT_APP_ENABLE_FEATURE_X=true
```

## Docker Integration

### Docker Compose Environment Management
```yaml
# docker-compose.yml
version: '3.8'

services:
  backend:
    build: ./backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - API_KEY=${API_KEY}
    env_file:
      - .env

  frontend:
    build: ./frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_API_KEY=${REACT_APP_API_KEY}
    env_file:
      - .env
```

### Dockerfile Best Practices
```dockerfile
# ✅ Correct - Using ARG and ENV
FROM python:3.11-slim

# Build-time arguments
ARG APP_VERSION=1.0.0

# Runtime environment variables
ENV PYTHONPATH=/app \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    APP_VERSION=${APP_VERSION}

# ❌ Wrong - Hardcoded secrets
# ENV API_KEY=sk-1234567890abcdef  # NEVER DO THIS
```

## Production Secrets Management

### Docker Secrets (Production)
```yaml
# docker-compose.prod.yml
version: '3.8'

services:
  backend:
    environment:
      - DATABASE_PASSWORD_FILE=/run/secrets/db_password
      - JWT_SECRET_KEY_FILE=/run/secrets/jwt_secret
    secrets:
      - db_password
      - jwt_secret

secrets:
  db_password:
    external: true
  jwt_secret:
    external: true
```

### Kubernetes Secrets (Production)
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
type: Opaque
data:
  database-password: <base64-encoded-password>
  jwt-secret-key: <base64-encoded-jwt-secret>
  api-key: <base64-encoded-api-key>
```

## Validation and Security Checks

### Required Validation Functions
```python
def validate_environment():
    """Validate all required environment variables are set."""
    required_vars = [
        'DATABASE_URL',
        'JWT_SECRET_KEY',
        'API_KEY',
        'REDIS_URL'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        raise ValueError(f"Missing required environment variables: {missing_vars}")

# Call during application startup
validate_environment()
```

### Security Checks
```python
def check_security_settings():
    """Validate security-related environment variables."""
    jwt_secret = os.getenv('JWT_SECRET_KEY', '')
    if len(jwt_secret) < 32:
        raise ValueError("JWT_SECRET_KEY must be at least 32 characters long")
    
    if os.getenv('DEBUG', 'false').lower() == 'true' and os.getenv('ENVIRONMENT') == 'production':
        raise ValueError("DEBUG cannot be True in production environment")
```

## Development Workflow

### Setup Commands (PowerShell)
```powershell
# Copy environment template
Copy-Item .env.example .env

# Verify environment setup
poetry run python -c "from config.settings import settings; print('Environment loaded successfully')"

# Check for missing variables
poetry run python scripts/validate_env.py
```

### Documentation Requirements
Always include in README.md:
```markdown
## Environment Setup

1. Copy the environment template:
   ```powershell
   Copy-Item .env.example .env
   ```

2. Edit `.env` with your actual values
3. Never commit `.env` files with real secrets
4. Use `.env.example` to document required variables
```


**Remember: Environment variables are the foundation of secure configuration. Never hardcode secrets, always use environment variables, and maintain clear separation between templates and actual secret values.**