---
description: 
globs: "**/.github/**","**/.gitignore","**/*.md","**/CHANGELOG*","**/CONTRIBUTING*","**/commit-msg","**/pre-commit*"
alwaysApply: false
---
---
description: Enforce Git workflow standards, conventional commits, and repository organization
---

# Git & Commit Standards Rule

## Core Requirements
**ALWAYS follow conventional commit standards and maintain a clean Git history.** Establish consistent Git workflows from project inception.

## Conventional Commits Standard

### Commit Message Format
```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Required Commit Types
- **feat**: A new feature for the user
- **fix**: A bug fix for the user
- **docs**: Documentation only changes
- **style**: Changes that don't affect meaning (white-space, formatting, etc.)
- **refactor**: Code change that neither fixes a bug nor adds a feature
- **perf**: Code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **chore**: Changes to build process or auxiliary tools
- **ci**: Changes to CI configuration files and scripts
- **build**: Changes that affect the build system or external dependencies

### Commit Message Examples
```bash
# ✅ Good Examples
feat(auth): add JWT token validation middleware
fix(api): resolve database connection timeout issue
docs(readme): update installation instructions
style(backend): format code with black formatter
refactor(database): extract connection logic to separate module
perf(api): optimize user query with database indexing
test(auth): add unit tests for login functionality
chore(deps): update fastapi to version 0.104.0
ci(github): add automated testing workflow
build(docker): update python base image to 3.11

# ✅ Breaking Changes
feat(api)!: change user authentication to OAuth2
BREAKING CHANGE: The /auth/login endpoint now requires OAuth2 instead of basic auth

# ❌ Bad Examples
"Fixed stuff"                    # Too vague
"Updated files"                  # No context
"WIP"                           # Not descriptive
"asdf"                          # Meaningless
"Fixed the thing that was broken" # Too casual
```

## Branch Naming Conventions

### Branch Types and Patterns
```bash
# Feature branches
feature/user-authentication
feature/payment-integration
feature/dashboard-ui

# Bug fix branches
fix/login-redirect-issue
fix/memory-leak-in-parser
hotfix/critical-security-patch

# Release branches
release/v1.2.0
release/v2.0.0-beta

# Development branches
develop
main (or master)

# Personal/experimental branches
chore/update-dependencies
docs/api-documentation
refactor/database-layer
```

### Branch Naming Rules
- Use lowercase with hyphens (kebab-case)
- Include ticket number when applicable: `feature/AUTH-123-user-login`
- Keep names concise but descriptive
- Use prefixes: `feature/`, `fix/`, `hotfix/`, `release/`, `chore/`

## Repository Structure Requirements

### Required Files in Repository Root
```
project-root/
├── .gitignore                 # Comprehensive ignore patterns
├── .github/                   # GitHub-specific files
│   ├── ISSUE_TEMPLATE.md     # Issue template
│   ├── PULL_REQUEST_TEMPLATE.md  # PR template
│   └── workflows/            # GitHub Actions
├── README.md                 # Project documentation
├── CHANGELOG.md              # Version history
├── CONTRIBUTING.md           # Contribution guidelines
├── LICENSE                   # Project license
├── .env.example              # Environment template
└── docker-compose.yml        # Container orchestration
```

### .gitignore Template
```gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Logs
logs
*.log

# Docker
*.pid
*.seed
*.pid.lock

# Database
*.db
*.sqlite
*.sqlite3

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build outputs
/build
/dist
/.next
/out

# Testing
/coverage
/.nyc_output

# Secrets
*.pem
*.key
*.crt
secrets/
.secrets/

# Temporary files
.tmp/
.temp/
*.tmp
*.temp
```

## GitHub Templates

### Issue Template (.github/ISSUE_TEMPLATE.md)
```markdown
---
name: Bug report
about: Create a report to help us improve
title: '[BUG] '
labels: bug
assignees: ''
---

## Bug Description
A clear and concise description of what the bug is.

## Steps to Reproduce
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

## Expected Behavior
A clear and concise description of what you expected to happen.

## Actual Behavior
A clear and concise description of what actually happened.

## Screenshots
If applicable, add screenshots to help explain your problem.

## Environment
- OS: [e.g. Windows 10, macOS Big Sur]
- Browser: [e.g. Chrome, Safari]
- Version: [e.g. 22]
- Docker version: [if applicable]

## Additional Context
Add any other context about the problem here.

## Possible Solution
If you have suggestions on how to fix the bug, please describe them here.
```

### Pull Request Template (.github/PULL_REQUEST_TEMPLATE.md)
```markdown
## Description
Brief description of what this PR does.

## Type of Change
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update
- [ ] Code refactoring
- [ ] Performance improvement
- [ ] Test coverage improvement

## Related Issues
Closes #[issue_number]
Relates to #[issue_number]

## Changes Made
- [ ] Change 1
- [ ] Change 2
- [ ] Change 3

## Testing
- [ ] Unit tests added/updated
- [ ] Integration tests added/updated
- [ ] Manual testing completed
- [ ] All tests pass

## Checklist
- [ ] My code follows the project's style guidelines
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published

## Screenshots (if applicable)
Add screenshots here if the changes affect the UI.

## Additional Notes
Any additional information that reviewers should know.
```

## Git Hooks and Automation

### Pre-commit Hook Setup
```bash
# Install pre-commit
pip install pre-commit

# Create .pre-commit-config.yaml
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: check-json

  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3.11

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203]

# Install hooks
pre-commit install
```

### Commit Message Validation Hook
```bash
#!/bin/sh
# .git/hooks/commit-msg

# Conventional Commits pattern
conventional_commit_pattern="^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+\))?: .{1,50}"

if ! grep -qE "$conventional_commit_pattern" "$1"; then
    echo "❌ Invalid commit message format!"
    echo ""
    echo "Please use conventional commits format:"
    echo "  <type>[optional scope]: <description>"
    echo ""
    echo "Examples:"
    echo "  feat(auth): add user login functionality"
    echo "  fix(api): resolve database connection issue"
    echo "  docs(readme): update installation guide"
    echo ""
    echo "Valid types: feat, fix, docs, style, refactor, perf, test, chore, ci, build"
    exit 1
fi

# Check commit message length
if [ $(head -n1 "$1" | wc -c) -gt 72 ]; then
    echo "❌ Commit message too long! Keep it under 72 characters."
    exit 1
fi

echo "✅ Commit message format is valid"
```

## Git Workflow Standards

### Feature Development Workflow
```powershell
# Start new feature
git checkout main
git pull origin main
git checkout -b feature/user-authentication

# Make changes and commit
git add .
git commit -m "feat(auth): add JWT token validation"

# Push feature branch
git push -u origin feature/user-authentication

# Create pull request via GitHub CLI or web interface
gh pr create --title "feat(auth): add user authentication" --body "Implements JWT-based authentication system"

# After review and approval
git checkout main
git pull origin main
git branch -d feature/user-authentication
```

### Hotfix Workflow
```powershell
# Create hotfix from main
git checkout main
git pull origin main
git checkout -b hotfix/critical-security-patch

# Fix and commit
git add .
git commit -m "fix(security): patch SQL injection vulnerability"

# Push and create urgent PR
git push -u origin hotfix/critical-security-patch
gh pr create --title "URGENT: Security patch" --body "Fixes critical SQL injection vulnerability"

# Deploy immediately after review
```

### Release Workflow
```powershell
# Create release branch
git checkout main
git pull origin main
git checkout -b release/v1.2.0

# Update version numbers and changelog
# Commit version changes
git add .
git commit -m "chore(release): bump version to 1.2.0"

# Create release PR
git push -u origin release/v1.2.0
gh pr create --title "Release v1.2.0" --body "Release version 1.2.0 with new features and bug fixes"

# After merge, tag the release
git checkout main
git pull origin main
git tag -a v1.2.0 -m "Release version 1.2.0"
git push origin v1.2.0
```

## CHANGELOG.md Maintenance

### Changelog Format (Keep a Changelog)
```markdown
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- New feature descriptions

### Changed
- Changes in existing functionality

### Deprecated
- Soon-to-be removed features

### Removed
- Now removed features

### Fixed
- Any bug fixes

### Security
- Security improvements

## [1.2.0] - 2023-12-01

### Added
- JWT authentication system
- User profile management
- Docker containerization

### Changed
- Database schema for better performance
- API response format for consistency

### Fixed
- Memory leak in data processing
- CORS configuration issues

### Security
- Input validation improvements
- SQL injection prevention

## [1.1.0] - 2023-11-15

### Added
- Initial user authentication
- Basic API endpoints
- Database migrations

[Unreleased]: https://github.com/username/repo/compare/v1.2.0...HEAD
[1.2.0]: https://github.com/username/repo/compare/v1.1.0...v1.2.0
[1.1.0]: https://github.com/username/repo/releases/tag/v1.1.0
```

## Git Configuration

### Required Git Configuration
```powershell
# Set user information
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

# Set default branch name
git config --global init.defaultBranch main

# Enable automatic line ending conversion
git config --global core.autocrlf true  # Windows
git config --global core.autocrlf input # macOS/Linux

# Set default editor
git config --global core.editor "code --wait"

# Enable color output
git config --global color.ui auto

# Set pull strategy
git config --global pull.rebase true

# Set push strategy
git config --global push.default simple
```

## Common Git Commands (PowerShell Compatible)

### Daily Workflow Commands
```powershell
# Check status and staged changes
git status
git diff --staged

# Add files selectively
git add -p  # Interactive staging
git add backend/  # Add directory

# Commit with conventional format
git commit -m "feat(api): add user endpoint"

# Push current branch
git push

# Update local main branch
git checkout main
git pull origin main

# Clean up merged branches
git branch --merged | Where-Object { $_ -notmatch "main|develop" } | ForEach-Object { git branch -d $_.Trim() }
```

### History and Debugging
```powershell
# View commit history
git log --oneline --graph --decorate
git log --grep="feat" --oneline  # Search commits

# Find when bug was introduced
git bisect start
git bisect bad HEAD
git bisect good v1.0.0

# Check who changed what
git blame filename.py
git show commit-hash
```


**Remember: Consistent Git practices are essential for team collaboration. Always use conventional commits, maintain clean history, and follow established branching strategies.**